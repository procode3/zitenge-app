// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  password   String
  role       Role     @default(CUSTOMER)
  orders     Order[]
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id              String      @id @default(cuid())
  customerName    String
  deliveryDate    DateTime
  deliveryAddress String
  notes           String?
  phoneNumber     String?
  guestEmail      String?
  guestName       String?
  deposit         Float?
  userId          String?
  user            User?       @relation(fields: [userId], references: [id])
  status          OrderStatus @default(PENDING)
  orderItems      OrderItem[]
  cancelledby     String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  Payment         Payment[]
}

model ShoeRack {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  price       Json
  length      Int
  levels      Int
  image       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  shoeRackId String
  shoeRack   ShoeRack @relation(fields: [shoeRackId], references: [id])
  shelfColor String
  frameColor String
  quantity   Int
  price      Decimal
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String
  order         Order         @relation(fields: [orderId], references: [id])
  amountPaid    Float
  TotalAmount   Float
  paymentMethod PaymentMethod
  status        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Color {
  id   String @id @default(cuid())
  name String
  hex  String @unique
}

enum Role {
  ADMIN
  EMPLOYEE
  CUSTOMER
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  MPESA
  BANK_TRANSFER
}
